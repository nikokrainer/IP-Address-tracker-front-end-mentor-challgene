{"version":3,"sources":["scripts/index.js"],"names":["map","L","setView","tileLayer","attribution","addTo","marker","document","getElementsByClassName","style","display","zoomControl","setPosition","updateMarker","update_marker","secret_api","bypass_cors_url","api_uri","current_version","ipOutput","getElementById","locationOutput","timezoneOutput","ispOutput","entered_ip","search_btn","headers_option","headers","getIPDetails","default_ip","undefined","ip_uri","fetch","then","results","json","data","innerHTML","ip","location","city","country","postalCode","timezone","lat","lng","catch","error","alert","console","log","addEventListener","e","preventDefault","value"],"mappings":";AACA,IAAIA,EAAMC,EAAED,IAAI,OAAOE,QAAQ,CAAC,UAAW,WAAY,GAEvDD,EAAEE,UAAU,qDAAsD,CAC9DC,YAAa,4FACdC,MAAML,GAETC,EAAEK,OAAO,CAAC,UAAW,YAAYD,MAAML,GAEvCO,SAASC,uBAAwB,+BAAgC,GAAGC,MAAMC,QAAU,OAMpFV,EAAIW,YAAYC,YAAY,eAG5BC,aAAe,WAACC,IAAAA,EAAgB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,CAAC,UAAW,WACxCd,EAAIE,QAAQY,EAAe,GAC3Bb,EAAEK,OAAOQ,GAAeT,MAAML,IAQlC,IAAMe,EAAa,eACbC,EAAkB,uCAClBC,EAAU,6BACZC,EAAkB,KAGlBC,EAAWZ,SAASa,eAAe,YACnCC,EAAiBd,SAASa,eAAe,kBACzCE,EAAiBf,SAASa,eAAe,kBACzCG,EAAYhB,SAASa,eAAe,aAGlCI,EAAajB,SAASa,eAAe,cACrCK,EAAalB,SAASa,eAAe,eAKrCM,EAAiB,CACnBC,QAAS,CAC0B,8BAAA,MAKvCC,aAAe,SAACC,GACTA,GAAcC,MAAdD,EACKE,IAAAA,EAAYf,GAAAA,OAAAA,GAAkBC,OAAAA,GAAUC,OAAAA,EAA0BH,YAAAA,OAAAA,QAGnEgB,EAAYf,GAAAA,OAAAA,GAAkBC,OAAAA,GAAUC,OAAAA,EAA0BH,YAAAA,OAAAA,EAAwBc,eAAAA,OAAAA,GAEjGG,MAAMD,EAAQL,GACbO,KAAK,SAAAC,GAAWA,OAAAA,EAAQC,SACxBF,KAAK,SAAAG,GACFjB,EAASkB,UAAYD,EAAKE,GAC1BjB,EAAegB,UAAeD,GAAAA,OAAAA,EAAKG,SAASC,KAAQJ,KAAAA,OAAAA,EAAKG,SAASE,QAAWL,KAAAA,OAAAA,EAAKG,SAASG,YAC3FpB,EAAee,UAAYD,EAAKG,SAASI,SACzCpB,EAAUc,UAAYD,EAAKb,UAG3BV,aAAa,CAACuB,EAAKG,SAASK,IAAKR,EAAKG,SAASM,QAElDC,MAAM,SAAAC,GACHC,MAAM,4BACNC,QAAQC,IAAIH,MAIpBxC,SAAS4C,iBAAiB,OAAQtC,gBAElCY,EAAW0B,iBAAiB,QAAS,SAAAC,GAE7B5B,GADJ4B,EAAEC,iBACsB,IAApB7B,EAAW8B,OAAmC,MAApB9B,EAAW8B,MAGrC,OAFA1B,aAAaJ,EAAW8B,YACxB9B,EAAW8B,MAAQ,IAGnB9B,EAAW8B,MAAQ,GACnBN,MAAM","file":"scripts.1b1e80d7.js","sourceRoot":"..\\src","sourcesContent":["\r\nvar map = L.map('map').setView([45.166666, 15.499998], 6);\r\n\r\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n}).addTo(map);\r\n\r\nL.marker([45.166666, 15.499998]).addTo(map)\r\n    \r\ndocument.getElementsByClassName( 'leaflet-control-attribution' )[0].style.display = 'none';//removes leaflet attribution in bottom right corner\r\n\r\n/* L.control.zoom({\r\n    position: 'bottomright'\r\n}).addTo(map); */\r\n\r\nmap.zoomControl.setPosition('bottomright'); \r\n\r\n//update marker\r\nupdateMarker = (update_marker = [45.166666, 15.499998]) => {\r\n    map.setView(update_marker, 6);\r\n    L.marker(update_marker).addTo(map)\r\n}\r\n\r\n\r\n\r\n//IPIFY\r\n\r\n//pull from different file\r\nconst secret_api = 'your api key'\r\nconst bypass_cors_url = 'https://cors-anywhere.herokuapp.com/'\r\nconst api_uri = 'https://geo.ipify.org/api/'\r\nlet current_version = 'v1'\r\n\r\n//elements to update\r\nlet ipOutput = document.getElementById('ipOutput')\r\nlet locationOutput = document.getElementById('locationOutput')\r\nlet timezoneOutput = document.getElementById('timezoneOutput')\r\nlet ispOutput = document.getElementById('ispOutput')\r\n\r\n//form elements\r\nconst entered_ip = document.getElementById('ip_address')\r\nconst search_btn = document.getElementById('input-btn-a')\r\n\r\n//elems\r\n\r\n//api header\r\nconst headers_option = {\r\n    headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n    }\r\n}\r\n\r\n//get ip details\r\ngetIPDetails = (default_ip) => {\r\n    if(default_ip == undefined){\r\n        var ip_uri = `${bypass_cors_url}${api_uri}${current_version}?apiKey=${secret_api}`\r\n    }\r\n    else{\r\n       var ip_uri = `${bypass_cors_url}${api_uri}${current_version}?apiKey=${secret_api}&ipAddress=${default_ip}`\r\n    }\r\n    fetch(ip_uri, headers_option)\r\n    .then(results => results.json())\r\n    .then(data => {\r\n        ipOutput.innerHTML = data.ip\r\n        locationOutput.innerHTML = `${data.location.city} ${data.location.country} ${data.location.postalCode}`\r\n        timezoneOutput.innerHTML = data.location.timezone\r\n        ispOutput.innerHTML = data.ispOutput\r\n\r\n        //update map marker\r\n        updateMarker([data.location.lat, data.location.lng])\r\n    })\r\n    .catch(error => {\r\n        alert(\"Unable to get IP details\")\r\n        console.log(error);\r\n    })\r\n}\r\n\r\ndocument.addEventListener('load', updateMarker())\r\n\r\nsearch_btn.addEventListener('click', e => {\r\n    e.preventDefault()\r\n    if (entered_ip.value != '' && entered_ip.value != null){\r\n        getIPDetails(entered_ip.value)\r\n        entered_ip.value = ''\r\n        return\r\n    }else{\r\n        entered_ip.value = ''\r\n        alert(\"Please enter a valid IP address\")\r\n    }\r\n})\r\n"]}